{"ast":null,"code":"var _jsxFileName = \"/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Die from './components/Die.js';\nimport { nanoid } from 'nanoid';\n/**\n * Challenge: Update the array of numbers in state to be\n * an array of objects instead. Each object should look like:\n * { value: <random number>, isHeld: false }\n *\n * Making this change will break parts of our code, so make\n * sure to update things so we're back to a working state\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [diceArr, setDiceArr] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const diceArray = [];\n    let i = 0;\n\n    while (i < 10) {\n      diceArray.push({\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false,\n        id: nanoid()\n      });\n      i++;\n    }\n\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceArr(diceArr => diceArr.map(dice => {\n      return !dice.isHeld ? { ...dice,\n        value: Math.floor(Math.random() * 6) + 1\n      } : { ...dice\n      };\n    }));\n  } //I need to set an ID for each dice and then if the ids match, then I set that dice isHeld to true\n\n\n  function setTrue(id) {\n    setDiceArr(prevArr => prevArr.map(dice => {\n      console.log(\"here\");\n      return id === dice.id ? { ...dice,\n        isHeld: !dice.isHeld\n      } : { ...dice\n      };\n    }));\n  }\n\n  const dies = diceArr.map((dice, index) => /*#__PURE__*/_jsxDEV(Die, {\n    isHeld: dice.isHeld,\n    eventHandle: setTrue,\n    value: dice.value\n  }, dice.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 44\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"die-container\",\n      children: dies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      className: \"roll-die-btn\",\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SNC4KbY8IcxJ4m9AGpk50ViFlAo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js"],"names":["React","Die","nanoid","App","diceArr","setDiceArr","useState","allNewDice","diceArray","i","push","value","Math","floor","random","isHeld","id","rollDice","map","dice","setTrue","prevArr","console","log","dies","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,KAAK,CAACM,QAAN,CAAeC,UAAU,EAAzB,CAA9B;;AAEA,WAASA,UAAT,GAAsB;AACpB,UAAMC,SAAS,GAAG,EAAlB;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG,EAAX,EAAc;AACZD,MAAAA,SAAS,CAACE,IAAV,CAAe;AACbC,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAA8B,CADxB;AAEbC,QAAAA,MAAM,EAAE,KAFK;AAGbC,QAAAA,EAAE,EAAEd,MAAM;AAHG,OAAf;AAKAO,MAAAA,CAAC;AACF;;AACD,WAAOD,SAAP;AACD;;AAED,WAASS,QAAT,GAAoB;AAClBZ,IAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,CAACc,GAAR,CAAYC,IAAI,IAAI;AACxC,aAAO,CAACA,IAAI,CAACJ,MAAN,GAAgB,EAAC,GAAGI,IAAJ;AAAUR,QAAAA,KAAK,EAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAA8B;AAA9C,OAAhB,GAAoE,EAAC,GAAGK;AAAJ,OAA3E;AACD,KAFqB,CAAZ,CAAV;AAGD,GAtBY,CAwBf;;;AACE,WAASC,OAAT,CAAiBJ,EAAjB,EAAoB;AAClBX,IAAAA,UAAU,CAACgB,OAAO,IAAIA,OAAO,CAACH,GAAR,CAAYC,IAAI,IAAI;AACxCG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAOP,EAAE,KAAKG,IAAI,CAACH,EAAZ,GAAkB,EAAC,GAAGG,IAAJ;AAAUJ,QAAAA,MAAM,EAAE,CAACI,IAAI,CAACJ;AAAxB,OAAlB,GAAsD,EAAC,GAAGI;AAAJ,OAA7D;AACC,KAHmB,CAAZ,CAAV;AAMD;;AAED,QAAMK,IAAI,GAAGpB,OAAO,CAACc,GAAR,CAAY,CAACC,IAAD,EAAMM,KAAN,kBAAgB,QAAC,GAAD;AAAmB,IAAA,MAAM,EAAEN,IAAI,CAACJ,MAAhC;AAAwC,IAAA,WAAW,EAAEK,OAArD;AAA8D,IAAA,KAAK,EAAED,IAAI,CAACR;AAA1E,KAAUQ,IAAI,CAACH,EAAf;AAAA;AAAA;AAAA;AAAA,UAA5B,CAAb;AAEA,sBACE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACGQ;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAQ,MAAA,OAAO,EAAEP,QAAjB;AAA2B,MAAA,SAAS,EAAC,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA5CQd,G;;KAAAA,G;AA8CT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport Die from './components/Die.js'\nimport {nanoid} from 'nanoid'\n\n/**\n * Challenge: Update the array of numbers in state to be\n * an array of objects instead. Each object should look like:\n * { value: <random number>, isHeld: false }\n *\n * Making this change will break parts of our code, so make\n * sure to update things so we're back to a working state\n */\nfunction App() {\n\n  const [diceArr, setDiceArr] = React.useState(allNewDice())\n\n  function allNewDice() {\n    const diceArray = []\n    let i = 0;\n    while (i < 10){\n      diceArray.push({\n        value: Math.floor(Math.random() * 6)+1,\n        isHeld: false,\n        id: nanoid()\n      });\n      i++;\n    }\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceArr(diceArr => diceArr.map(dice => {\n      return !dice.isHeld ? ({...dice, value:Math.floor(Math.random() * 6)+1}) : {...dice}\n    }));\n  }\n\n//I need to set an ID for each dice and then if the ids match, then I set that dice isHeld to true\n  function setTrue(id){\n    setDiceArr(prevArr => prevArr.map(dice => {\n      console.log(\"here\")\n      return id === dice.id ? ({...dice, isHeld: !dice.isHeld}) : ({...dice})\n      }\n    ))\n\n  }\n\n  const dies = diceArr.map((dice,index) => <Die key={dice.id} isHeld={dice.isHeld} eventHandle={setTrue} value={dice.value} />)\n\n  return (\n    <main className=\"main-app\">\n      <div className=\"die-container\">\n        {dies}\n      </div>\n      <button onClick={rollDice} className=\"roll-die-btn\">Roll</button>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}