{"ast":null,"code":"var _jsxFileName = \"/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Die from './components/Die.js';\nimport { nanoid } from 'nanoid';\n/**\n * Challenge: Check the dice array for these winning conditions:\n * 1. All dice are held, and\n * 2. all dice have the same value\n *\n * If both conditions are true, set `tenzies` to true and log\n * \"You won!\" to the console\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tenzies, setTenzies] = React.useState(false);\n  const [diceArr, setDiceArr] = React.useState(allNewDice());\n  React.useEffect(() => {\n    console.log(\"Dice state change\");\n    diceArr.every((dice, index) => {\n      if (dice.isHeld === true && dice.value === diceArr[0].value) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }, [diceArr]);\n\n  function generateNewDie() {\n    return {\n      value: Math.floor(Math.random() * 6) + 1,\n      isHeld: false,\n      id: nanoid()\n    };\n  }\n\n  function allNewDice() {\n    const diceArray = [];\n    let i = 0;\n\n    while (i < 10) {\n      diceArray.push(generateNewDie());\n      i++;\n    }\n\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceArr(diceArr => diceArr.map(dice => {\n      return !dice.isHeld ? generateNewDie() : dice;\n    }));\n  }\n\n  function setTrue(id) {\n    setDiceArr(prevArr => prevArr.map(dice => {\n      return id === dice.id ? { ...dice,\n        isHeld: !dice.isHeld\n      } : dice;\n    }));\n  }\n\n  const dies = diceArr.map((dice, index) => /*#__PURE__*/_jsxDEV(Die, {\n    isHeld: dice.isHeld,\n    eventHandle: () => setTrue(dice.id),\n    value: dice.value\n  }, dice.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 44\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tenzies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"die-container\",\n      children: dies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      className: \"roll-die-btn\",\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NEAC3b2hoO+jMxM98+USqa4wOXk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js"],"names":["React","Die","nanoid","App","tenzies","setTenzies","useState","diceArr","setDiceArr","allNewDice","useEffect","console","log","every","dice","index","isHeld","value","generateNewDie","Math","floor","random","id","diceArray","i","push","rollDice","map","setTrue","prevArr","dies"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Die from './components/Die.js'\nimport {nanoid} from 'nanoid'\n\n/**\n * Challenge: Check the dice array for these winning conditions:\n * 1. All dice are held, and\n * 2. all dice have the same value\n *\n * If both conditions are true, set `tenzies` to true and log\n * \"You won!\" to the console\n */\n\nfunction App() {\n\n  const [tenzies, setTenzies] = React.useState(false)\n  const [diceArr, setDiceArr] = React.useState(allNewDice())\n\n  React.useEffect(() => {\n    console.log(\"Dice state change\")\n    diceArr.every((dice, index) => {\n      if (dice.isHeld === true && dice.value === diceArr[0].value){\n        return true\n      } else {\n        return false\n      }\n    })\n\n  },[diceArr])\n\n  function generateNewDie() {\n    return {\n      value: Math.floor(Math.random() * 6)+1,\n      isHeld: false,\n      id: nanoid()\n    }\n  }\n\n  function allNewDice() {\n    const diceArray = []\n    let i = 0;\n    while (i < 10){\n      diceArray.push(generateNewDie());\n      i++;\n    }\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceArr(diceArr => diceArr.map(dice => {\n      return !dice.isHeld ? generateNewDie() : dice\n    }));\n  }\n\n  function setTrue(id){\n    setDiceArr(prevArr => prevArr.map(dice => {\n      return id === dice.id ? ({...dice, isHeld: !dice.isHeld}) : dice\n      }))\n  }\n\n  const dies = diceArr.map((dice,index) => <Die key={dice.id} isHeld={dice.isHeld} eventHandle={() => setTrue(dice.id)} value={dice.value} />)\n\n  return (\n    <main className=\"main-app\">\n      <h1 className=\"title\">Tenzies</h1>\n      <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n      <div className=\"die-container\">\n        {dies}\n      </div>\n      <button onClick={rollDice} className=\"roll-die-btn\">Roll</button>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}