{"ast":null,"code":"var _jsxFileName = \"/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Die from './components/Die.js';\n/**\n * Challenge: Update the array of numbers in state to be\n * an array of objects instead. Each object should look like:\n * { value: <random number>, isHeld: false }\n *\n * Making this change will break parts of our code, so make\n * sure to update things so we're back to a working state\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [diceArr, setDiceArr] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const diceArray = [];\n    let i = 0;\n\n    while (i < 10) {\n      diceArray.push({\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false\n      });\n      i++;\n    }\n\n    return diceArray;\n  }\n\n  function rollDice() {//setDiceArr(diceArr.map(dice => ({...dice, value:Math.floor(Math.random() * 6)+1})));\n  }\n\n  const dies = diceArr.map((value, index) => /*#__PURE__*/_jsxDEV(Die, {\n    value: value\n  }, 100 + index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 45\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"die-container\",\n      children: dies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      className: \"roll-die-btn\",\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SNC4KbY8IcxJ4m9AGpk50ViFlAo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kylemonstad/Desktop/codingPractice/React/tenzies-app/src/App.js"],"names":["React","Die","App","diceArr","setDiceArr","useState","allNewDice","diceArray","i","push","value","Math","floor","random","isHeld","rollDice","dies","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,KAAK,CAACK,QAAN,CAAeC,UAAU,EAAzB,CAA9B;;AAEA,WAASA,UAAT,GAAsB;AACpB,UAAMC,SAAS,GAAG,EAAlB;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG,EAAX,EAAc;AACZD,MAAAA,SAAS,CAACE,IAAV,CAAe;AACbC,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAA8B,CADxB;AAEbC,QAAAA,MAAM,EAAE;AAFK,OAAf;AAIAN,MAAAA,CAAC;AACF;;AACD,WAAOD,SAAP;AACD;;AAED,WAASQ,QAAT,GAAoB,CAElB;AACD;;AAED,QAAMC,IAAI,GAAGb,OAAO,CAACc,GAAR,CAAY,CAACP,KAAD,EAAOQ,KAAP,kBAAiB,QAAC,GAAD;AAAqB,IAAA,KAAK,EAAER;AAA5B,KAAU,MAAIQ,KAAd;AAAA;AAAA;AAAA;AAAA,UAA7B,CAAb;AAEA,sBACE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAQ,MAAA,OAAO,EAAED,QAAjB;AAA2B,MAAA,SAAS,EAAC,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAhCQb,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport Die from './components/Die.js'\n\n/**\n * Challenge: Update the array of numbers in state to be\n * an array of objects instead. Each object should look like:\n * { value: <random number>, isHeld: false }\n *\n * Making this change will break parts of our code, so make\n * sure to update things so we're back to a working state\n */\nfunction App() {\n\n  const [diceArr, setDiceArr] = React.useState(allNewDice())\n\n  function allNewDice() {\n    const diceArray = []\n    let i = 0;\n    while (i < 10){\n      diceArray.push({\n        value: Math.floor(Math.random() * 6)+1,\n        isHeld: false\n      });\n      i++;\n    }\n    return diceArray;\n  }\n\n  function rollDice() {\n    \n    //setDiceArr(diceArr.map(dice => ({...dice, value:Math.floor(Math.random() * 6)+1})));\n  }\n\n  const dies = diceArr.map((value,index) => <Die key={100+index} value={value} />)\n\n  return (\n    <main className=\"main-app\">\n      <div className=\"die-container\">\n        {dies}\n      </div>\n      <button onClick={rollDice} className=\"roll-die-btn\">Roll</button>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}